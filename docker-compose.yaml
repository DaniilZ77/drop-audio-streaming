services:
  backend:
    container_name: drop-audio-streaming
    restart: always
    build: .
    env_file:
      - .env
    ports:
      - 50052:50052
      - 8081:8081
    networks:
      - drop-audio-streaming
      - drop-shared
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      migrate:
        condition: service_started
      nginx:
        condition: service_started
  migrate:
    image: migrate/migrate
    env_file:
      - .env
    networks:
      - drop-audio-streaming
    volumes:
      - ./internal/db/migrations:/migrations
    command: ["-path", "/migrations", "-database",  "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable", "up"]
    depends_on: 
      postgres:
        condition: service_healthy
  postgres:
    image: postgres:16.4-alpine
    container_name: postgres-streaming
    restart: always
    env_file:
      - .env
    ports:
      - 5430:5432
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - drop-audio-streaming
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s
  minio:
    image: minio/minio
    container_name: minio-streaming
    restart: always
    networks:
      - drop-audio-streaming
    ports:
      - 8090:8090
    volumes:
      - minio-data:/var/lib/minio/data
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 30s
      retries: 3
      start_period: 20s
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
      MINIO_NOTIFY_POSTGRES_ENABLE_PRIMARY: on
      MINIO_NOTIFY_POSTGRES_FORMAT_PRIMARY: access
      MINIO_NOTIFY_POSTGRES_TABLE_PRIMARY: ${MINIO_EVENTS_TABLE}
      MINIO_NOTIFY_POSTGRES_CONNECTION_STRING_PRIMARY: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
    command: server --console-address ":8090" --address ":9000" /var/lib/minio/data
  mc:
    image: minio/mc
    container_name: mc-streaming
    depends_on:
      minio:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - drop-audio-streaming
    entrypoint: >
      /bin/sh -c "/usr/bin/mc config host add myminio http://${MINIO_URL} ${MINIO_USER} ${MINIO_PASSWORD};
      /usr/bin/mc mb --ignore-existing myminio/${MINIO_BUCKET};
      /usr/bin/mc event remove --event put myminio/${MINIO_BUCKET} arn:minio:sqs::PRIMARY:postgresql;
      /usr/bin/mc event add --event put myminio/${MINIO_BUCKET} arn:minio:sqs::PRIMARY:postgresql; exit 0;"
  nginx:
    image: nginx:alpine
    container_name: nginx-streaming
    restart: always
    networks:
      - drop-audio-streaming
    ports:
      - 9090:9000
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./tls:/etc/nginx/tls:ro

volumes:
  postgres-data:
  minio-data:

networks:
  drop-audio-streaming:
    driver: bridge
  drop-shared:
    external: true
