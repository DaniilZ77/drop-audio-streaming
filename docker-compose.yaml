services:
  backend:
    container_name: drop-audio-streaming
    restart: always
    build: .
    env_file:
      - .env
    ports:
      - "8080:8080"
    networks:
      - drop-audio-streaming
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "./bin/migrator -db_url postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB} -migrations_path ${MIGRATIONS_PATH} &&
      ./bin/drop-audio-streaming -db_url postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB} -grpc_port ${GRPC_PORT} -http_port ${HTTP_PORT} -redis_password ${REDIS_PASSWORD} -redis_addr ${REDIS_ADDRESS} -cert ${CERT} -key ${KEY} -jwt_secret ${JWT_SECRET} -read_timeout ${READ_TIMEOUT} -log_level ${LOG_LEVEL} -minio_password ${MINIO_PASSWORD} -minio_user ${MINIO_USER} -minio_endpoint ${MINIO_ENDPOINT} -minio_bucket ${MINIO_BUCKET} -minio_use_ssl ${MINIO_USE_SSL} -minio_location ${MINIO_LOCATION} -chunk_size ${CHUNK_SIZE} -upload_url_ttl ${UPLOAD_URL_TTL} -user_history ${USER_HISTORY}"

  postgres:
    image: postgres:16.4-alpine
    container_name: postgres
    restart: always
    env_file:
      - .env
    ports:
      - "5430:5432"
    environment:
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_DB: $POSTGRES_DB
    networks:
      - drop-audio-streaming
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s
  
  redis:
    image: redis:alpine
    container_name: redis
    restart: always
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - drop-audio-streaming
    volumes:
      - redis-data:/var/lib/redis/data
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s
    command: /bin/sh -c "redis-server --requirepass ${REDIS_PASSWORD}"
  
  minio:
    image: minio/minio
    container_name: minio
    restart: always
    networks:
      - drop-audio-streaming
    ports:
      - "8090:8090"
    volumes:
      - minio-data:/var/lib/minio/data
    env_file:
      - .env
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    command: server --console-address ":8090" /var/lib/minio/data


volumes:
  postgres-data:
  redis-data:
  minio-data:

networks:
  drop-audio-streaming:
    driver: bridge