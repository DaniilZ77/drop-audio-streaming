// Code generated by mockery v2.50.0. DO NOT EDIT.

package core

import (
	context "context"
	io "io"

	core "github.com/MAXXXIMUS-tropical-milkshake/drop-audio-streaming/internal/core"

	mock "github.com/stretchr/testify/mock"
)

// MockBeatService is an autogenerated mock type for the BeatService type
type MockBeatService struct {
	mock.Mock
}

type MockBeatService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBeatService) EXPECT() *MockBeatService_Expecter {
	return &MockBeatService_Expecter{mock: &_m.Mock}
}

// AddBeat provides a mock function with given fields: ctx, beat
func (_m *MockBeatService) AddBeat(ctx context.Context, beat core.BeatParams) (string, string, error) {
	ret := _m.Called(ctx, beat)

	if len(ret) == 0 {
		panic("no return value specified for AddBeat")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, core.BeatParams) (string, string, error)); ok {
		return rf(ctx, beat)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.BeatParams) string); ok {
		r0 = rf(ctx, beat)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.BeatParams) string); ok {
		r1 = rf(ctx, beat)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, core.BeatParams) error); ok {
		r2 = rf(ctx, beat)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockBeatService_AddBeat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBeat'
type MockBeatService_AddBeat_Call struct {
	*mock.Call
}

// AddBeat is a helper method to define mock.On call
//   - ctx context.Context
//   - beat core.BeatParams
func (_e *MockBeatService_Expecter) AddBeat(ctx interface{}, beat interface{}) *MockBeatService_AddBeat_Call {
	return &MockBeatService_AddBeat_Call{Call: _e.mock.On("AddBeat", ctx, beat)}
}

func (_c *MockBeatService_AddBeat_Call) Run(run func(ctx context.Context, beat core.BeatParams)) *MockBeatService_AddBeat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.BeatParams))
	})
	return _c
}

func (_c *MockBeatService_AddBeat_Call) Return(beatPath string, imagePath string, err error) *MockBeatService_AddBeat_Call {
	_c.Call.Return(beatPath, imagePath, err)
	return _c
}

func (_c *MockBeatService_AddBeat_Call) RunAndReturn(run func(context.Context, core.BeatParams) (string, string, error)) *MockBeatService_AddBeat_Call {
	_c.Call.Return(run)
	return _c
}

// GetBeat provides a mock function with given fields: ctx, beatID
func (_m *MockBeatService) GetBeat(ctx context.Context, beatID int) (*core.BeatParams, error) {
	ret := _m.Called(ctx, beatID)

	if len(ret) == 0 {
		panic("no return value specified for GetBeat")
	}

	var r0 *core.BeatParams
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*core.BeatParams, error)); ok {
		return rf(ctx, beatID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *core.BeatParams); ok {
		r0 = rf(ctx, beatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.BeatParams)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, beatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBeatService_GetBeat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBeat'
type MockBeatService_GetBeat_Call struct {
	*mock.Call
}

// GetBeat is a helper method to define mock.On call
//   - ctx context.Context
//   - beatID int
func (_e *MockBeatService_Expecter) GetBeat(ctx interface{}, beatID interface{}) *MockBeatService_GetBeat_Call {
	return &MockBeatService_GetBeat_Call{Call: _e.mock.On("GetBeat", ctx, beatID)}
}

func (_c *MockBeatService_GetBeat_Call) Run(run func(ctx context.Context, beatID int)) *MockBeatService_GetBeat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockBeatService_GetBeat_Call) Return(beat *core.BeatParams, err error) *MockBeatService_GetBeat_Call {
	_c.Call.Return(beat, err)
	return _c
}

func (_c *MockBeatService_GetBeat_Call) RunAndReturn(run func(context.Context, int) (*core.BeatParams, error)) *MockBeatService_GetBeat_Call {
	_c.Call.Return(run)
	return _c
}

// GetBeatByFilter provides a mock function with given fields: ctx, userID, params
func (_m *MockBeatService) GetBeatByFilter(ctx context.Context, userID int, params core.FeedFilter) (*core.BeatParams, error) {
	ret := _m.Called(ctx, userID, params)

	if len(ret) == 0 {
		panic("no return value specified for GetBeatByFilter")
	}

	var r0 *core.BeatParams
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, core.FeedFilter) (*core.BeatParams, error)); ok {
		return rf(ctx, userID, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, core.FeedFilter) *core.BeatParams); ok {
		r0 = rf(ctx, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.BeatParams)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, core.FeedFilter) error); ok {
		r1 = rf(ctx, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBeatService_GetBeatByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBeatByFilter'
type MockBeatService_GetBeatByFilter_Call struct {
	*mock.Call
}

// GetBeatByFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
//   - params core.FeedFilter
func (_e *MockBeatService_Expecter) GetBeatByFilter(ctx interface{}, userID interface{}, params interface{}) *MockBeatService_GetBeatByFilter_Call {
	return &MockBeatService_GetBeatByFilter_Call{Call: _e.mock.On("GetBeatByFilter", ctx, userID, params)}
}

func (_c *MockBeatService_GetBeatByFilter_Call) Run(run func(ctx context.Context, userID int, params core.FeedFilter)) *MockBeatService_GetBeatByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(core.FeedFilter))
	})
	return _c
}

func (_c *MockBeatService_GetBeatByFilter_Call) Return(beat *core.BeatParams, err error) *MockBeatService_GetBeatByFilter_Call {
	_c.Call.Return(beat, err)
	return _c
}

func (_c *MockBeatService_GetBeatByFilter_Call) RunAndReturn(run func(context.Context, int, core.FeedFilter) (*core.BeatParams, error)) *MockBeatService_GetBeatByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetBeatFromS3 provides a mock function with given fields: ctx, beatID, start, end
func (_m *MockBeatService) GetBeatFromS3(ctx context.Context, beatID int, start int, end *int) (io.ReadCloser, int, string, error) {
	ret := _m.Called(ctx, beatID, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetBeatFromS3")
	}

	var r0 io.ReadCloser
	var r1 int
	var r2 string
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *int) (io.ReadCloser, int, string, error)); ok {
		return rf(ctx, beatID, start, end)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *int) io.ReadCloser); ok {
		r0 = rf(ctx, beatID, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, *int) int); ok {
		r1 = rf(ctx, beatID, start, end)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int, *int) string); ok {
		r2 = rf(ctx, beatID, start, end)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(context.Context, int, int, *int) error); ok {
		r3 = rf(ctx, beatID, start, end)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// MockBeatService_GetBeatFromS3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBeatFromS3'
type MockBeatService_GetBeatFromS3_Call struct {
	*mock.Call
}

// GetBeatFromS3 is a helper method to define mock.On call
//   - ctx context.Context
//   - beatID int
//   - start int
//   - end *int
func (_e *MockBeatService_Expecter) GetBeatFromS3(ctx interface{}, beatID interface{}, start interface{}, end interface{}) *MockBeatService_GetBeatFromS3_Call {
	return &MockBeatService_GetBeatFromS3_Call{Call: _e.mock.On("GetBeatFromS3", ctx, beatID, start, end)}
}

func (_c *MockBeatService_GetBeatFromS3_Call) Run(run func(ctx context.Context, beatID int, start int, end *int)) *MockBeatService_GetBeatFromS3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(*int))
	})
	return _c
}

func (_c *MockBeatService_GetBeatFromS3_Call) Return(obj io.ReadCloser, size int, contentType string, err error) *MockBeatService_GetBeatFromS3_Call {
	_c.Call.Return(obj, size, contentType, err)
	return _c
}

func (_c *MockBeatService_GetBeatFromS3_Call) RunAndReturn(run func(context.Context, int, int, *int) (io.ReadCloser, int, string, error)) *MockBeatService_GetBeatFromS3_Call {
	_c.Call.Return(run)
	return _c
}

// GetBeatsByBeatmakerID provides a mock function with given fields: ctx, beatmakerID, p
func (_m *MockBeatService) GetBeatsByBeatmakerID(ctx context.Context, beatmakerID int, p core.GetBeatsParams) ([]core.BeatParams, int, error) {
	ret := _m.Called(ctx, beatmakerID, p)

	if len(ret) == 0 {
		panic("no return value specified for GetBeatsByBeatmakerID")
	}

	var r0 []core.BeatParams
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, core.GetBeatsParams) ([]core.BeatParams, int, error)); ok {
		return rf(ctx, beatmakerID, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, core.GetBeatsParams) []core.BeatParams); ok {
		r0 = rf(ctx, beatmakerID, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.BeatParams)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, core.GetBeatsParams) int); ok {
		r1 = rf(ctx, beatmakerID, p)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, core.GetBeatsParams) error); ok {
		r2 = rf(ctx, beatmakerID, p)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockBeatService_GetBeatsByBeatmakerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBeatsByBeatmakerID'
type MockBeatService_GetBeatsByBeatmakerID_Call struct {
	*mock.Call
}

// GetBeatsByBeatmakerID is a helper method to define mock.On call
//   - ctx context.Context
//   - beatmakerID int
//   - p core.GetBeatsParams
func (_e *MockBeatService_Expecter) GetBeatsByBeatmakerID(ctx interface{}, beatmakerID interface{}, p interface{}) *MockBeatService_GetBeatsByBeatmakerID_Call {
	return &MockBeatService_GetBeatsByBeatmakerID_Call{Call: _e.mock.On("GetBeatsByBeatmakerID", ctx, beatmakerID, p)}
}

func (_c *MockBeatService_GetBeatsByBeatmakerID_Call) Run(run func(ctx context.Context, beatmakerID int, p core.GetBeatsParams)) *MockBeatService_GetBeatsByBeatmakerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(core.GetBeatsParams))
	})
	return _c
}

func (_c *MockBeatService_GetBeatsByBeatmakerID_Call) Return(beats []core.BeatParams, total int, err error) *MockBeatService_GetBeatsByBeatmakerID_Call {
	_c.Call.Return(beats, total, err)
	return _c
}

func (_c *MockBeatService_GetBeatsByBeatmakerID_Call) RunAndReturn(run func(context.Context, int, core.GetBeatsParams) ([]core.BeatParams, int, error)) *MockBeatService_GetBeatsByBeatmakerID_Call {
	_c.Call.Return(run)
	return _c
}

// GetFilters provides a mock function with given fields: ctx
func (_m *MockBeatService) GetFilters(ctx context.Context) (*core.Filters, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetFilters")
	}

	var r0 *core.Filters
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*core.Filters, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *core.Filters); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.Filters)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBeatService_GetFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFilters'
type MockBeatService_GetFilters_Call struct {
	*mock.Call
}

// GetFilters is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBeatService_Expecter) GetFilters(ctx interface{}) *MockBeatService_GetFilters_Call {
	return &MockBeatService_GetFilters_Call{Call: _e.mock.On("GetFilters", ctx)}
}

func (_c *MockBeatService_GetFilters_Call) Run(run func(ctx context.Context)) *MockBeatService_GetFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBeatService_GetFilters_Call) Return(_a0 *core.Filters, _a1 error) *MockBeatService_GetFilters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBeatService_GetFilters_Call) RunAndReturn(run func(context.Context) (*core.Filters, error)) *MockBeatService_GetFilters_Call {
	_c.Call.Return(run)
	return _c
}

// GetUploadURL provides a mock function with given fields: ctx, beatPath
func (_m *MockBeatService) GetUploadURL(ctx context.Context, beatPath string) (string, error) {
	ret := _m.Called(ctx, beatPath)

	if len(ret) == 0 {
		panic("no return value specified for GetUploadURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, beatPath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, beatPath)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, beatPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBeatService_GetUploadURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUploadURL'
type MockBeatService_GetUploadURL_Call struct {
	*mock.Call
}

// GetUploadURL is a helper method to define mock.On call
//   - ctx context.Context
//   - beatPath string
func (_e *MockBeatService_Expecter) GetUploadURL(ctx interface{}, beatPath interface{}) *MockBeatService_GetUploadURL_Call {
	return &MockBeatService_GetUploadURL_Call{Call: _e.mock.On("GetUploadURL", ctx, beatPath)}
}

func (_c *MockBeatService_GetUploadURL_Call) Run(run func(ctx context.Context, beatPath string)) *MockBeatService_GetUploadURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBeatService_GetUploadURL_Call) Return(url string, err error) *MockBeatService_GetUploadURL_Call {
	_c.Call.Return(url, err)
	return _c
}

func (_c *MockBeatService_GetUploadURL_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockBeatService_GetUploadURL_Call {
	_c.Call.Return(run)
	return _c
}

// WritePartialContent provides a mock function with given fields: ctx, r, w, chunkSize
func (_m *MockBeatService) WritePartialContent(ctx context.Context, r io.Reader, w io.Writer, chunkSize int) error {
	ret := _m.Called(ctx, r, w, chunkSize)

	if len(ret) == 0 {
		panic("no return value specified for WritePartialContent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader, io.Writer, int) error); ok {
		r0 = rf(ctx, r, w, chunkSize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBeatService_WritePartialContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WritePartialContent'
type MockBeatService_WritePartialContent_Call struct {
	*mock.Call
}

// WritePartialContent is a helper method to define mock.On call
//   - ctx context.Context
//   - r io.Reader
//   - w io.Writer
//   - chunkSize int
func (_e *MockBeatService_Expecter) WritePartialContent(ctx interface{}, r interface{}, w interface{}, chunkSize interface{}) *MockBeatService_WritePartialContent_Call {
	return &MockBeatService_WritePartialContent_Call{Call: _e.mock.On("WritePartialContent", ctx, r, w, chunkSize)}
}

func (_c *MockBeatService_WritePartialContent_Call) Run(run func(ctx context.Context, r io.Reader, w io.Writer, chunkSize int)) *MockBeatService_WritePartialContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(io.Reader), args[2].(io.Writer), args[3].(int))
	})
	return _c
}

func (_c *MockBeatService_WritePartialContent_Call) Return(_a0 error) *MockBeatService_WritePartialContent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBeatService_WritePartialContent_Call) RunAndReturn(run func(context.Context, io.Reader, io.Writer, int) error) *MockBeatService_WritePartialContent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBeatService creates a new instance of MockBeatService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBeatService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBeatService {
	mock := &MockBeatService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
