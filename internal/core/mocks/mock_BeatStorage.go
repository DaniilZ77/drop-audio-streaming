// Code generated by mockery v2.50.0. DO NOT EDIT.

package core

import (
	context "context"
	io "io"

	core "github.com/MAXXXIMUS-tropical-milkshake/drop-audio-streaming/internal/core"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockBeatStorage is an autogenerated mock type for the BeatStorage type
type MockBeatStorage struct {
	mock.Mock
}

type MockBeatStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBeatStorage) EXPECT() *MockBeatStorage_Expecter {
	return &MockBeatStorage_Expecter{mock: &_m.Mock}
}

// AddBeat provides a mock function with given fields: ctx, beat
func (_m *MockBeatStorage) AddBeat(ctx context.Context, beat core.BeatParams) (int, error) {
	ret := _m.Called(ctx, beat)

	if len(ret) == 0 {
		panic("no return value specified for AddBeat")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.BeatParams) (int, error)); ok {
		return rf(ctx, beat)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.BeatParams) int); ok {
		r0 = rf(ctx, beat)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.BeatParams) error); ok {
		r1 = rf(ctx, beat)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBeatStorage_AddBeat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBeat'
type MockBeatStorage_AddBeat_Call struct {
	*mock.Call
}

// AddBeat is a helper method to define mock.On call
//   - ctx context.Context
//   - beat core.BeatParams
func (_e *MockBeatStorage_Expecter) AddBeat(ctx interface{}, beat interface{}) *MockBeatStorage_AddBeat_Call {
	return &MockBeatStorage_AddBeat_Call{Call: _e.mock.On("AddBeat", ctx, beat)}
}

func (_c *MockBeatStorage_AddBeat_Call) Run(run func(ctx context.Context, beat core.BeatParams)) *MockBeatStorage_AddBeat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.BeatParams))
	})
	return _c
}

func (_c *MockBeatStorage_AddBeat_Call) Return(beatID int, err error) *MockBeatStorage_AddBeat_Call {
	_c.Call.Return(beatID, err)
	return _c
}

func (_c *MockBeatStorage_AddBeat_Call) RunAndReturn(run func(context.Context, core.BeatParams) (int, error)) *MockBeatStorage_AddBeat_Call {
	_c.Call.Return(run)
	return _c
}

// ClearUserSeenBeats provides a mock function with given fields: ctx, userID
func (_m *MockBeatStorage) ClearUserSeenBeats(ctx context.Context, userID int) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ClearUserSeenBeats")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBeatStorage_ClearUserSeenBeats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearUserSeenBeats'
type MockBeatStorage_ClearUserSeenBeats_Call struct {
	*mock.Call
}

// ClearUserSeenBeats is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
func (_e *MockBeatStorage_Expecter) ClearUserSeenBeats(ctx interface{}, userID interface{}) *MockBeatStorage_ClearUserSeenBeats_Call {
	return &MockBeatStorage_ClearUserSeenBeats_Call{Call: _e.mock.On("ClearUserSeenBeats", ctx, userID)}
}

func (_c *MockBeatStorage_ClearUserSeenBeats_Call) Run(run func(ctx context.Context, userID int)) *MockBeatStorage_ClearUserSeenBeats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockBeatStorage_ClearUserSeenBeats_Call) Return(_a0 error) *MockBeatStorage_ClearUserSeenBeats_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBeatStorage_ClearUserSeenBeats_Call) RunAndReturn(run func(context.Context, int) error) *MockBeatStorage_ClearUserSeenBeats_Call {
	_c.Call.Return(run)
	return _c
}

// GetBeatByFilter provides a mock function with given fields: ctx, filter, seen
func (_m *MockBeatStorage) GetBeatByFilter(ctx context.Context, filter core.FeedFilter, seen []string) (*core.BeatParams, error) {
	ret := _m.Called(ctx, filter, seen)

	if len(ret) == 0 {
		panic("no return value specified for GetBeatByFilter")
	}

	var r0 *core.BeatParams
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.FeedFilter, []string) (*core.BeatParams, error)); ok {
		return rf(ctx, filter, seen)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.FeedFilter, []string) *core.BeatParams); ok {
		r0 = rf(ctx, filter, seen)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.BeatParams)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.FeedFilter, []string) error); ok {
		r1 = rf(ctx, filter, seen)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBeatStorage_GetBeatByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBeatByFilter'
type MockBeatStorage_GetBeatByFilter_Call struct {
	*mock.Call
}

// GetBeatByFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - filter core.FeedFilter
//   - seen []string
func (_e *MockBeatStorage_Expecter) GetBeatByFilter(ctx interface{}, filter interface{}, seen interface{}) *MockBeatStorage_GetBeatByFilter_Call {
	return &MockBeatStorage_GetBeatByFilter_Call{Call: _e.mock.On("GetBeatByFilter", ctx, filter, seen)}
}

func (_c *MockBeatStorage_GetBeatByFilter_Call) Run(run func(ctx context.Context, filter core.FeedFilter, seen []string)) *MockBeatStorage_GetBeatByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.FeedFilter), args[2].([]string))
	})
	return _c
}

func (_c *MockBeatStorage_GetBeatByFilter_Call) Return(beat *core.BeatParams, err error) *MockBeatStorage_GetBeatByFilter_Call {
	_c.Call.Return(beat, err)
	return _c
}

func (_c *MockBeatStorage_GetBeatByFilter_Call) RunAndReturn(run func(context.Context, core.FeedFilter, []string) (*core.BeatParams, error)) *MockBeatStorage_GetBeatByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetBeatByID provides a mock function with given fields: ctx, id, param
func (_m *MockBeatStorage) GetBeatByID(ctx context.Context, id int, param core.IsDownloaded) (*core.Beat, error) {
	ret := _m.Called(ctx, id, param)

	if len(ret) == 0 {
		panic("no return value specified for GetBeatByID")
	}

	var r0 *core.Beat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, core.IsDownloaded) (*core.Beat, error)); ok {
		return rf(ctx, id, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, core.IsDownloaded) *core.Beat); ok {
		r0 = rf(ctx, id, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.Beat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, core.IsDownloaded) error); ok {
		r1 = rf(ctx, id, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBeatStorage_GetBeatByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBeatByID'
type MockBeatStorage_GetBeatByID_Call struct {
	*mock.Call
}

// GetBeatByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - param core.IsDownloaded
func (_e *MockBeatStorage_Expecter) GetBeatByID(ctx interface{}, id interface{}, param interface{}) *MockBeatStorage_GetBeatByID_Call {
	return &MockBeatStorage_GetBeatByID_Call{Call: _e.mock.On("GetBeatByID", ctx, id, param)}
}

func (_c *MockBeatStorage_GetBeatByID_Call) Run(run func(ctx context.Context, id int, param core.IsDownloaded)) *MockBeatStorage_GetBeatByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(core.IsDownloaded))
	})
	return _c
}

func (_c *MockBeatStorage_GetBeatByID_Call) Return(_a0 *core.Beat, _a1 error) *MockBeatStorage_GetBeatByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBeatStorage_GetBeatByID_Call) RunAndReturn(run func(context.Context, int, core.IsDownloaded) (*core.Beat, error)) *MockBeatStorage_GetBeatByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetBeatFromS3 provides a mock function with given fields: ctx, beatPath, start, end
func (_m *MockBeatStorage) GetBeatFromS3(ctx context.Context, beatPath string, start int, end *int) (io.ReadCloser, int, string, error) {
	ret := _m.Called(ctx, beatPath, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetBeatFromS3")
	}

	var r0 io.ReadCloser
	var r1 int
	var r2 string
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, *int) (io.ReadCloser, int, string, error)); ok {
		return rf(ctx, beatPath, start, end)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, *int) io.ReadCloser); ok {
		r0 = rf(ctx, beatPath, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, *int) int); ok {
		r1 = rf(ctx, beatPath, start, end)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, *int) string); ok {
		r2 = rf(ctx, beatPath, start, end)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(context.Context, string, int, *int) error); ok {
		r3 = rf(ctx, beatPath, start, end)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// MockBeatStorage_GetBeatFromS3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBeatFromS3'
type MockBeatStorage_GetBeatFromS3_Call struct {
	*mock.Call
}

// GetBeatFromS3 is a helper method to define mock.On call
//   - ctx context.Context
//   - beatPath string
//   - start int
//   - end *int
func (_e *MockBeatStorage_Expecter) GetBeatFromS3(ctx interface{}, beatPath interface{}, start interface{}, end interface{}) *MockBeatStorage_GetBeatFromS3_Call {
	return &MockBeatStorage_GetBeatFromS3_Call{Call: _e.mock.On("GetBeatFromS3", ctx, beatPath, start, end)}
}

func (_c *MockBeatStorage_GetBeatFromS3_Call) Run(run func(ctx context.Context, beatPath string, start int, end *int)) *MockBeatStorage_GetBeatFromS3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(*int))
	})
	return _c
}

func (_c *MockBeatStorage_GetBeatFromS3_Call) Return(obj io.ReadCloser, size int, contentType string, err error) *MockBeatStorage_GetBeatFromS3_Call {
	_c.Call.Return(obj, size, contentType, err)
	return _c
}

func (_c *MockBeatStorage_GetBeatFromS3_Call) RunAndReturn(run func(context.Context, string, int, *int) (io.ReadCloser, int, string, error)) *MockBeatStorage_GetBeatFromS3_Call {
	_c.Call.Return(run)
	return _c
}

// GetBeatsByBeatmakerID provides a mock function with given fields: ctx, beatmakerID, p
func (_m *MockBeatStorage) GetBeatsByBeatmakerID(ctx context.Context, beatmakerID int, p core.GetBeatsParams) ([]core.BeatParams, int, error) {
	ret := _m.Called(ctx, beatmakerID, p)

	if len(ret) == 0 {
		panic("no return value specified for GetBeatsByBeatmakerID")
	}

	var r0 []core.BeatParams
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, core.GetBeatsParams) ([]core.BeatParams, int, error)); ok {
		return rf(ctx, beatmakerID, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, core.GetBeatsParams) []core.BeatParams); ok {
		r0 = rf(ctx, beatmakerID, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.BeatParams)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, core.GetBeatsParams) int); ok {
		r1 = rf(ctx, beatmakerID, p)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, core.GetBeatsParams) error); ok {
		r2 = rf(ctx, beatmakerID, p)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockBeatStorage_GetBeatsByBeatmakerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBeatsByBeatmakerID'
type MockBeatStorage_GetBeatsByBeatmakerID_Call struct {
	*mock.Call
}

// GetBeatsByBeatmakerID is a helper method to define mock.On call
//   - ctx context.Context
//   - beatmakerID int
//   - p core.GetBeatsParams
func (_e *MockBeatStorage_Expecter) GetBeatsByBeatmakerID(ctx interface{}, beatmakerID interface{}, p interface{}) *MockBeatStorage_GetBeatsByBeatmakerID_Call {
	return &MockBeatStorage_GetBeatsByBeatmakerID_Call{Call: _e.mock.On("GetBeatsByBeatmakerID", ctx, beatmakerID, p)}
}

func (_c *MockBeatStorage_GetBeatsByBeatmakerID_Call) Run(run func(ctx context.Context, beatmakerID int, p core.GetBeatsParams)) *MockBeatStorage_GetBeatsByBeatmakerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(core.GetBeatsParams))
	})
	return _c
}

func (_c *MockBeatStorage_GetBeatsByBeatmakerID_Call) Return(beats []core.BeatParams, total int, err error) *MockBeatStorage_GetBeatsByBeatmakerID_Call {
	_c.Call.Return(beats, total, err)
	return _c
}

func (_c *MockBeatStorage_GetBeatsByBeatmakerID_Call) RunAndReturn(run func(context.Context, int, core.GetBeatsParams) ([]core.BeatParams, int, error)) *MockBeatStorage_GetBeatsByBeatmakerID_Call {
	_c.Call.Return(run)
	return _c
}

// GetFilters provides a mock function with given fields: ctx
func (_m *MockBeatStorage) GetFilters(ctx context.Context) (*core.Filters, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetFilters")
	}

	var r0 *core.Filters
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*core.Filters, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *core.Filters); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.Filters)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBeatStorage_GetFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFilters'
type MockBeatStorage_GetFilters_Call struct {
	*mock.Call
}

// GetFilters is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBeatStorage_Expecter) GetFilters(ctx interface{}) *MockBeatStorage_GetFilters_Call {
	return &MockBeatStorage_GetFilters_Call{Call: _e.mock.On("GetFilters", ctx)}
}

func (_c *MockBeatStorage_GetFilters_Call) Run(run func(ctx context.Context)) *MockBeatStorage_GetFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBeatStorage_GetFilters_Call) Return(_a0 *core.Filters, _a1 error) *MockBeatStorage_GetFilters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBeatStorage_GetFilters_Call) RunAndReturn(run func(context.Context) (*core.Filters, error)) *MockBeatStorage_GetFilters_Call {
	_c.Call.Return(run)
	return _c
}

// GetFullBeatByID provides a mock function with given fields: ctx, id, param
func (_m *MockBeatStorage) GetFullBeatByID(ctx context.Context, id int, param core.IsDownloaded) (*core.BeatParams, error) {
	ret := _m.Called(ctx, id, param)

	if len(ret) == 0 {
		panic("no return value specified for GetFullBeatByID")
	}

	var r0 *core.BeatParams
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, core.IsDownloaded) (*core.BeatParams, error)); ok {
		return rf(ctx, id, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, core.IsDownloaded) *core.BeatParams); ok {
		r0 = rf(ctx, id, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.BeatParams)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, core.IsDownloaded) error); ok {
		r1 = rf(ctx, id, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBeatStorage_GetFullBeatByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFullBeatByID'
type MockBeatStorage_GetFullBeatByID_Call struct {
	*mock.Call
}

// GetFullBeatByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - param core.IsDownloaded
func (_e *MockBeatStorage_Expecter) GetFullBeatByID(ctx interface{}, id interface{}, param interface{}) *MockBeatStorage_GetFullBeatByID_Call {
	return &MockBeatStorage_GetFullBeatByID_Call{Call: _e.mock.On("GetFullBeatByID", ctx, id, param)}
}

func (_c *MockBeatStorage_GetFullBeatByID_Call) Run(run func(ctx context.Context, id int, param core.IsDownloaded)) *MockBeatStorage_GetFullBeatByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(core.IsDownloaded))
	})
	return _c
}

func (_c *MockBeatStorage_GetFullBeatByID_Call) Return(_a0 *core.BeatParams, _a1 error) *MockBeatStorage_GetFullBeatByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBeatStorage_GetFullBeatByID_Call) RunAndReturn(run func(context.Context, int, core.IsDownloaded) (*core.BeatParams, error)) *MockBeatStorage_GetFullBeatByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPresignedURLGet provides a mock function with given fields: ctx, path, expiry
func (_m *MockBeatStorage) GetPresignedURLGet(ctx context.Context, path string, expiry time.Duration) (string, error) {
	ret := _m.Called(ctx, path, expiry)

	if len(ret) == 0 {
		panic("no return value specified for GetPresignedURLGet")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) (string, error)); ok {
		return rf(ctx, path, expiry)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) string); ok {
		r0 = rf(ctx, path, expiry)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration) error); ok {
		r1 = rf(ctx, path, expiry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBeatStorage_GetPresignedURLGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPresignedURLGet'
type MockBeatStorage_GetPresignedURLGet_Call struct {
	*mock.Call
}

// GetPresignedURLGet is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - expiry time.Duration
func (_e *MockBeatStorage_Expecter) GetPresignedURLGet(ctx interface{}, path interface{}, expiry interface{}) *MockBeatStorage_GetPresignedURLGet_Call {
	return &MockBeatStorage_GetPresignedURLGet_Call{Call: _e.mock.On("GetPresignedURLGet", ctx, path, expiry)}
}

func (_c *MockBeatStorage_GetPresignedURLGet_Call) Run(run func(ctx context.Context, path string, expiry time.Duration)) *MockBeatStorage_GetPresignedURLGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockBeatStorage_GetPresignedURLGet_Call) Return(url string, err error) *MockBeatStorage_GetPresignedURLGet_Call {
	_c.Call.Return(url, err)
	return _c
}

func (_c *MockBeatStorage_GetPresignedURLGet_Call) RunAndReturn(run func(context.Context, string, time.Duration) (string, error)) *MockBeatStorage_GetPresignedURLGet_Call {
	_c.Call.Return(run)
	return _c
}

// GetPresignedURLPut provides a mock function with given fields: ctx, path, expiry
func (_m *MockBeatStorage) GetPresignedURLPut(ctx context.Context, path string, expiry time.Duration) (string, error) {
	ret := _m.Called(ctx, path, expiry)

	if len(ret) == 0 {
		panic("no return value specified for GetPresignedURLPut")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) (string, error)); ok {
		return rf(ctx, path, expiry)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) string); ok {
		r0 = rf(ctx, path, expiry)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration) error); ok {
		r1 = rf(ctx, path, expiry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBeatStorage_GetPresignedURLPut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPresignedURLPut'
type MockBeatStorage_GetPresignedURLPut_Call struct {
	*mock.Call
}

// GetPresignedURLPut is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - expiry time.Duration
func (_e *MockBeatStorage_Expecter) GetPresignedURLPut(ctx interface{}, path interface{}, expiry interface{}) *MockBeatStorage_GetPresignedURLPut_Call {
	return &MockBeatStorage_GetPresignedURLPut_Call{Call: _e.mock.On("GetPresignedURLPut", ctx, path, expiry)}
}

func (_c *MockBeatStorage_GetPresignedURLPut_Call) Run(run func(ctx context.Context, path string, expiry time.Duration)) *MockBeatStorage_GetPresignedURLPut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockBeatStorage_GetPresignedURLPut_Call) Return(url string, err error) *MockBeatStorage_GetPresignedURLPut_Call {
	_c.Call.Return(url, err)
	return _c
}

func (_c *MockBeatStorage_GetPresignedURLPut_Call) RunAndReturn(run func(context.Context, string, time.Duration) (string, error)) *MockBeatStorage_GetPresignedURLPut_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserSeenBeats provides a mock function with given fields: ctx, userID
func (_m *MockBeatStorage) GetUserSeenBeats(ctx context.Context, userID int) ([]string, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSeenBeats")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]string, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []string); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBeatStorage_GetUserSeenBeats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserSeenBeats'
type MockBeatStorage_GetUserSeenBeats_Call struct {
	*mock.Call
}

// GetUserSeenBeats is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
func (_e *MockBeatStorage_Expecter) GetUserSeenBeats(ctx interface{}, userID interface{}) *MockBeatStorage_GetUserSeenBeats_Call {
	return &MockBeatStorage_GetUserSeenBeats_Call{Call: _e.mock.On("GetUserSeenBeats", ctx, userID)}
}

func (_c *MockBeatStorage_GetUserSeenBeats_Call) Run(run func(ctx context.Context, userID int)) *MockBeatStorage_GetUserSeenBeats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockBeatStorage_GetUserSeenBeats_Call) Return(_a0 []string, _a1 error) *MockBeatStorage_GetUserSeenBeats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBeatStorage_GetUserSeenBeats_Call) RunAndReturn(run func(context.Context, int) ([]string, error)) *MockBeatStorage_GetUserSeenBeats_Call {
	_c.Call.Return(run)
	return _c
}

// ReplaceUserSeenBeat provides a mock function with given fields: ctx, userID, beatID
func (_m *MockBeatStorage) ReplaceUserSeenBeat(ctx context.Context, userID int, beatID int) error {
	ret := _m.Called(ctx, userID, beatID)

	if len(ret) == 0 {
		panic("no return value specified for ReplaceUserSeenBeat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, userID, beatID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBeatStorage_ReplaceUserSeenBeat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplaceUserSeenBeat'
type MockBeatStorage_ReplaceUserSeenBeat_Call struct {
	*mock.Call
}

// ReplaceUserSeenBeat is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
//   - beatID int
func (_e *MockBeatStorage_Expecter) ReplaceUserSeenBeat(ctx interface{}, userID interface{}, beatID interface{}) *MockBeatStorage_ReplaceUserSeenBeat_Call {
	return &MockBeatStorage_ReplaceUserSeenBeat_Call{Call: _e.mock.On("ReplaceUserSeenBeat", ctx, userID, beatID)}
}

func (_c *MockBeatStorage_ReplaceUserSeenBeat_Call) Run(run func(ctx context.Context, userID int, beatID int)) *MockBeatStorage_ReplaceUserSeenBeat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockBeatStorage_ReplaceUserSeenBeat_Call) Return(_a0 error) *MockBeatStorage_ReplaceUserSeenBeat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBeatStorage_ReplaceUserSeenBeat_Call) RunAndReturn(run func(context.Context, int, int) error) *MockBeatStorage_ReplaceUserSeenBeat_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBeatStorage creates a new instance of MockBeatStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBeatStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBeatStorage {
	mock := &MockBeatStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
