// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: copyfrom.go

package generated

import (
	"context"
)

// iteratorForSaveGenres implements pgx.CopyFromSource.
type iteratorForSaveGenres struct {
	rows                 []SaveGenresParams
	skippedFirstNextCall bool
}

func (r *iteratorForSaveGenres) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForSaveGenres) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].BeatID,
		r.rows[0].GenreID,
	}, nil
}

func (r iteratorForSaveGenres) Err() error {
	return nil
}

func (q *Queries) SaveGenres(ctx context.Context, arg []SaveGenresParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"beats_genres"}, []string{"beat_id", "genre_id"}, &iteratorForSaveGenres{rows: arg})
}

// iteratorForSaveMoods implements pgx.CopyFromSource.
type iteratorForSaveMoods struct {
	rows                 []SaveMoodsParams
	skippedFirstNextCall bool
}

func (r *iteratorForSaveMoods) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForSaveMoods) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].BeatID,
		r.rows[0].MoodID,
	}, nil
}

func (r iteratorForSaveMoods) Err() error {
	return nil
}

func (q *Queries) SaveMoods(ctx context.Context, arg []SaveMoodsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"beats_moods"}, []string{"beat_id", "mood_id"}, &iteratorForSaveMoods{rows: arg})
}

// iteratorForSaveTags implements pgx.CopyFromSource.
type iteratorForSaveTags struct {
	rows                 []SaveTagsParams
	skippedFirstNextCall bool
}

func (r *iteratorForSaveTags) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForSaveTags) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].BeatID,
		r.rows[0].TagID,
	}, nil
}

func (r iteratorForSaveTags) Err() error {
	return nil
}

func (q *Queries) SaveTags(ctx context.Context, arg []SaveTagsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"beats_tags"}, []string{"beat_id", "tag_id"}, &iteratorForSaveTags{rows: arg})
}
