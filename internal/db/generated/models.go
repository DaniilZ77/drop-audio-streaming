// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package generated

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type NoteScale string

const (
	NoteScaleMajor NoteScale = "major"
	NoteScaleMinor NoteScale = "minor"
)

func (e *NoteScale) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = NoteScale(s)
	case string:
		*e = NoteScale(s)
	default:
		return fmt.Errorf("unsupported scan type for NoteScale: %T", src)
	}
	return nil
}

type NullNoteScale struct {
	NoteScale NoteScale
	Valid     bool // Valid is true if NoteScale is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullNoteScale) Scan(value interface{}) error {
	if value == nil {
		ns.NoteScale, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.NoteScale.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullNoteScale) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.NoteScale), nil
}

type Beat struct {
	ID                  uuid.UUID
	BeatmakerID         uuid.UUID
	FilePath            string
	ImagePath           string
	ArchivePath         string
	Name                string
	Description         string
	IsFileDownloaded    bool
	IsImageDownloaded   bool
	IsArchiveDownloaded bool
	RangeStart          int64
	RangeEnd            int64
	IsDeleted           bool
	CreatedAt           pgtype.Timestamp
	UpdatedAt           pgtype.Timestamp
	Bpm                 int32
}

type BeatsEvent struct {
	EventTime pgtype.Timestamp
	EventData []byte
}

type BeatsGenre struct {
	ID      uuid.UUID
	BeatID  uuid.UUID
	GenreID uuid.UUID
}

type BeatsMood struct {
	ID     uuid.UUID
	BeatID uuid.UUID
	MoodID uuid.UUID
}

type BeatsNote struct {
	ID     uuid.UUID
	BeatID uuid.UUID
	NoteID uuid.UUID
	Scale  NoteScale
}

type BeatsOwner struct {
	BeatID uuid.UUID
	UserID uuid.UUID
}

type BeatsTag struct {
	ID     uuid.UUID
	BeatID uuid.UUID
	TagID  uuid.UUID
}

type Genre struct {
	ID   uuid.UUID
	Name string
}

type Mood struct {
	ID   uuid.UUID
	Name string
}

type Note struct {
	ID   uuid.UUID
	Name string
}

type Tag struct {
	ID   uuid.UUID
	Name string
}
