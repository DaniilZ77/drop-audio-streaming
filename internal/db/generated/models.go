// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package generated

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Scale string

const (
	ScaleMajor Scale = "major"
	ScaleMinor Scale = "minor"
)

func (e *Scale) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Scale(s)
	case string:
		*e = Scale(s)
	default:
		return fmt.Errorf("unsupported scan type for Scale: %T", src)
	}
	return nil
}

type NullScale struct {
	Scale Scale
	Valid bool // Valid is true if Scale is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullScale) Scan(value interface{}) error {
	if value == nil {
		ns.Scale, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Scale.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullScale) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Scale), nil
}

type Beat struct {
	ID                int32
	BeatmakerID       int32
	FilePath          string
	ImagePath         string
	Name              string
	Description       string
	IsFileDownloaded  bool
	IsImageDownloaded bool
	IsDeleted         bool
	CreatedAt         pgtype.Timestamp
	UpdatedAt         pgtype.Timestamp
	Bpm               int32
}

type BeatsEvent struct {
	EventTime pgtype.Timestamp
	EventData []byte
}

type BeatsGenre struct {
	ID      int32
	BeatID  int32
	GenreID int32
}

type BeatsMood struct {
	ID     int32
	BeatID int32
	MoodID int32
}

type BeatsNote struct {
	ID     int32
	BeatID int32
	NoteID int32
	Scale  Scale
}

type BeatsTag struct {
	ID     int32
	BeatID int32
	TagID  int32
}

type Genre struct {
	ID   int32
	Name string
}

type Mood struct {
	ID   int32
	Name string
}

type Note struct {
	ID   int32
	Name string
}

type Tag struct {
	ID   int32
	Name string
}
